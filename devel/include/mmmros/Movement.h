// Generated by gencpp from file mmmros/Movement.msg
// DO NOT EDIT!


#ifndef MMMROS_MESSAGE_MOVEMENT_H
#define MMMROS_MESSAGE_MOVEMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mmmros
{
template <class ContainerAllocator>
struct Movement_
{
  typedef Movement_<ContainerAllocator> Type;

  Movement_()
    : leftWheelSpeed(0.0)
    , rightWheelSpeed(0.0)
    , leftShoulderAngle(0.0)
    , rightShoulderAngle(0.0)
    , leftElbowAngle(0.0)
    , rightElbowAngle(0.0)
    , leftArmExtension(0.0)
    , rightArmExtension(0.0)
    , leftGripperAngles()
    , rightGripperAngles()  {
      leftGripperAngles.assign(0.0);

      rightGripperAngles.assign(0.0);
  }
  Movement_(const ContainerAllocator& _alloc)
    : leftWheelSpeed(0.0)
    , rightWheelSpeed(0.0)
    , leftShoulderAngle(0.0)
    , rightShoulderAngle(0.0)
    , leftElbowAngle(0.0)
    , rightElbowAngle(0.0)
    , leftArmExtension(0.0)
    , rightArmExtension(0.0)
    , leftGripperAngles()
    , rightGripperAngles()  {
  (void)_alloc;
      leftGripperAngles.assign(0.0);

      rightGripperAngles.assign(0.0);
  }



   typedef double _leftWheelSpeed_type;
  _leftWheelSpeed_type leftWheelSpeed;

   typedef double _rightWheelSpeed_type;
  _rightWheelSpeed_type rightWheelSpeed;

   typedef double _leftShoulderAngle_type;
  _leftShoulderAngle_type leftShoulderAngle;

   typedef double _rightShoulderAngle_type;
  _rightShoulderAngle_type rightShoulderAngle;

   typedef double _leftElbowAngle_type;
  _leftElbowAngle_type leftElbowAngle;

   typedef double _rightElbowAngle_type;
  _rightElbowAngle_type rightElbowAngle;

   typedef double _leftArmExtension_type;
  _leftArmExtension_type leftArmExtension;

   typedef double _rightArmExtension_type;
  _rightArmExtension_type rightArmExtension;

   typedef boost::array<double, 5>  _leftGripperAngles_type;
  _leftGripperAngles_type leftGripperAngles;

   typedef boost::array<double, 5>  _rightGripperAngles_type;
  _rightGripperAngles_type rightGripperAngles;





  typedef boost::shared_ptr< ::mmmros::Movement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mmmros::Movement_<ContainerAllocator> const> ConstPtr;

}; // struct Movement_

typedef ::mmmros::Movement_<std::allocator<void> > Movement;

typedef boost::shared_ptr< ::mmmros::Movement > MovementPtr;
typedef boost::shared_ptr< ::mmmros::Movement const> MovementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mmmros::Movement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mmmros::Movement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mmmros::Movement_<ContainerAllocator1> & lhs, const ::mmmros::Movement_<ContainerAllocator2> & rhs)
{
  return lhs.leftWheelSpeed == rhs.leftWheelSpeed &&
    lhs.rightWheelSpeed == rhs.rightWheelSpeed &&
    lhs.leftShoulderAngle == rhs.leftShoulderAngle &&
    lhs.rightShoulderAngle == rhs.rightShoulderAngle &&
    lhs.leftElbowAngle == rhs.leftElbowAngle &&
    lhs.rightElbowAngle == rhs.rightElbowAngle &&
    lhs.leftArmExtension == rhs.leftArmExtension &&
    lhs.rightArmExtension == rhs.rightArmExtension &&
    lhs.leftGripperAngles == rhs.leftGripperAngles &&
    lhs.rightGripperAngles == rhs.rightGripperAngles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mmmros::Movement_<ContainerAllocator1> & lhs, const ::mmmros::Movement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mmmros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mmmros::Movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mmmros::Movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mmmros::Movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mmmros::Movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mmmros::Movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mmmros::Movement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mmmros::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b79e7ecaa7e231855c31617cdebe463";
  }

  static const char* value(const ::mmmros::Movement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b79e7ecaa7e2318ULL;
  static const uint64_t static_value2 = 0x55c31617cdebe463ULL;
};

template<class ContainerAllocator>
struct DataType< ::mmmros::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mmmros/Movement";
  }

  static const char* value(const ::mmmros::Movement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mmmros::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 leftWheelSpeed\n"
"float64 rightWheelSpeed\n"
"float64 leftShoulderAngle\n"
"float64 rightShoulderAngle\n"
"float64 leftElbowAngle\n"
"float64 rightElbowAngle\n"
"float64 leftArmExtension\n"
"float64 rightArmExtension\n"
"float64[5] leftGripperAngles\n"
"float64[5] rightGripperAngles\n"
;
  }

  static const char* value(const ::mmmros::Movement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mmmros::Movement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftWheelSpeed);
      stream.next(m.rightWheelSpeed);
      stream.next(m.leftShoulderAngle);
      stream.next(m.rightShoulderAngle);
      stream.next(m.leftElbowAngle);
      stream.next(m.rightElbowAngle);
      stream.next(m.leftArmExtension);
      stream.next(m.rightArmExtension);
      stream.next(m.leftGripperAngles);
      stream.next(m.rightGripperAngles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Movement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mmmros::Movement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mmmros::Movement_<ContainerAllocator>& v)
  {
    s << indent << "leftWheelSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.leftWheelSpeed);
    s << indent << "rightWheelSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.rightWheelSpeed);
    s << indent << "leftShoulderAngle: ";
    Printer<double>::stream(s, indent + "  ", v.leftShoulderAngle);
    s << indent << "rightShoulderAngle: ";
    Printer<double>::stream(s, indent + "  ", v.rightShoulderAngle);
    s << indent << "leftElbowAngle: ";
    Printer<double>::stream(s, indent + "  ", v.leftElbowAngle);
    s << indent << "rightElbowAngle: ";
    Printer<double>::stream(s, indent + "  ", v.rightElbowAngle);
    s << indent << "leftArmExtension: ";
    Printer<double>::stream(s, indent + "  ", v.leftArmExtension);
    s << indent << "rightArmExtension: ";
    Printer<double>::stream(s, indent + "  ", v.rightArmExtension);
    s << indent << "leftGripperAngles[]" << std::endl;
    for (size_t i = 0; i < v.leftGripperAngles.size(); ++i)
    {
      s << indent << "  leftGripperAngles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.leftGripperAngles[i]);
    }
    s << indent << "rightGripperAngles[]" << std::endl;
    for (size_t i = 0; i < v.rightGripperAngles.size(); ++i)
    {
      s << indent << "  rightGripperAngles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rightGripperAngles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MMMROS_MESSAGE_MOVEMENT_H
