# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mmmros/Movement.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Movement(genpy.Message):
  _md5sum = "0b79e7ecaa7e231855c31617cdebe463"
  _type = "mmmros/Movement"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 leftWheelSpeed
float64 rightWheelSpeed
float64 leftShoulderAngle
float64 rightShoulderAngle
float64 leftElbowAngle
float64 rightElbowAngle
float64 leftArmExtension
float64 rightArmExtension
float64[5] leftGripperAngles
float64[5] rightGripperAngles
"""
  __slots__ = ['leftWheelSpeed','rightWheelSpeed','leftShoulderAngle','rightShoulderAngle','leftElbowAngle','rightElbowAngle','leftArmExtension','rightArmExtension','leftGripperAngles','rightGripperAngles']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64[5]','float64[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftWheelSpeed,rightWheelSpeed,leftShoulderAngle,rightShoulderAngle,leftElbowAngle,rightElbowAngle,leftArmExtension,rightArmExtension,leftGripperAngles,rightGripperAngles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Movement, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leftWheelSpeed is None:
        self.leftWheelSpeed = 0.
      if self.rightWheelSpeed is None:
        self.rightWheelSpeed = 0.
      if self.leftShoulderAngle is None:
        self.leftShoulderAngle = 0.
      if self.rightShoulderAngle is None:
        self.rightShoulderAngle = 0.
      if self.leftElbowAngle is None:
        self.leftElbowAngle = 0.
      if self.rightElbowAngle is None:
        self.rightElbowAngle = 0.
      if self.leftArmExtension is None:
        self.leftArmExtension = 0.
      if self.rightArmExtension is None:
        self.rightArmExtension = 0.
      if self.leftGripperAngles is None:
        self.leftGripperAngles = [0.] * 5
      if self.rightGripperAngles is None:
        self.rightGripperAngles = [0.] * 5
    else:
      self.leftWheelSpeed = 0.
      self.rightWheelSpeed = 0.
      self.leftShoulderAngle = 0.
      self.rightShoulderAngle = 0.
      self.leftElbowAngle = 0.
      self.rightElbowAngle = 0.
      self.leftArmExtension = 0.
      self.rightArmExtension = 0.
      self.leftGripperAngles = [0.] * 5
      self.rightGripperAngles = [0.] * 5

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.leftWheelSpeed, _x.rightWheelSpeed, _x.leftShoulderAngle, _x.rightShoulderAngle, _x.leftElbowAngle, _x.rightElbowAngle, _x.leftArmExtension, _x.rightArmExtension))
      buff.write(_get_struct_5d().pack(*self.leftGripperAngles))
      buff.write(_get_struct_5d().pack(*self.rightGripperAngles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.leftWheelSpeed, _x.rightWheelSpeed, _x.leftShoulderAngle, _x.rightShoulderAngle, _x.leftElbowAngle, _x.rightElbowAngle, _x.leftArmExtension, _x.rightArmExtension,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 40
      self.leftGripperAngles = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.rightGripperAngles = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.leftWheelSpeed, _x.rightWheelSpeed, _x.leftShoulderAngle, _x.rightShoulderAngle, _x.leftElbowAngle, _x.rightElbowAngle, _x.leftArmExtension, _x.rightArmExtension))
      buff.write(self.leftGripperAngles.tostring())
      buff.write(self.rightGripperAngles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.leftWheelSpeed, _x.rightWheelSpeed, _x.leftShoulderAngle, _x.rightShoulderAngle, _x.leftElbowAngle, _x.rightElbowAngle, _x.leftArmExtension, _x.rightArmExtension,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 40
      self.leftGripperAngles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      start = end
      end += 40
      self.rightGripperAngles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
